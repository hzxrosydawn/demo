<?xml version="1.0" encoding="UTF-8"?>
<!--如果可能的话，建议你使用 -spring 变种形式定义日志配置。如果你使用标准的配置路径，Spring可能不能够完全控制日志初始化-->

<!--日志级别以及优先级排序: OFF > FATAL > ERROR > WARN > INFO > DEBUG > TRACE > ALL -->

<!--Configuration后面的status，这个用于设置log4j2自身内部的信息输出，可以不设置，当设置成trace时，你会看到log4j2内部各种详细输出-->
<!--monitorInterval：Log4j能够自动检测修改配置 文件和重新配置本身，设置间隔秒数-->
<configuration status="WARN" monitorInterval="60">
    <!--先定义所有的appender-->
    <appenders>
        <!--这个输出控制台的配置-->
        <Console name="Console" target="SYSTEM_OUT">
            <!--只接受程序中DEBUG级别及以上的日志进行处理-->
            <ThresholdFilter level="DEBUG" onMatch="ACCEPT" onMismatch="DENY"/>
            <PatternLayout pattern="[%d{HH:mm:ss.SSS}] %-5level %class{36} %L %M - %msg%xEx%n"/>
        </Console>

        <!-- 这个会打印出所有的info及以上级别的日志（OFF > FATAL > ERROR > WARN > INFO）。
        每次大小超过size，则这size大小的日志会自动存入按年-月-日建立的文件夹下面。
        fileName属性指定实时日志文件输出路径，而filePattern属性指定归档日志文件路径模式。-->
        <RollingFile name="RollingFileAppender" fileName="${sys:user.home}/logs/myApp.log"
                     filePattern="${sys:user.home}/logs/myApp/$${date:yyyy-MM-dd}/myApp-%d{yyyy-MM-dd}-%i.log">
            <!--控制台只输出level及以上级别的信息（onMatch），其他的直接拒绝（onMismatch）-->
            <ThresholdFilter level="info" onMatch="ACCEPT" onMismatch="DENY"/>
            <PatternLayout pattern="[%d{HH:mm:ss:SSS}] [%p] - %l - %m%n"/>
            <Policies>
                <TimeBasedTriggeringPolicy/>
                <SizeBasedTriggeringPolicy size="10 MB"/>
            </Policies>
        </RollingFile>
    </appenders>
    <!--然后定义logger，只有定义了logger并引入的appender，appender才会生效-->
    <loggers>
        <root level="all">
            <appender-ref ref="Console"/>
            <appender-ref ref="RollingFileAppender"/>
        </root>
    </loggers>
</configuration>